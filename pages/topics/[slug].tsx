import type {NextPage} from "next";

import Head from "next/head";
import React, {useState} from "react";
import Link from "next/link";
import {useRouter} from "next/router";
import {PostItem} from "interfaces";

import {getPostByTopicSlug, getAllTopicsSlugs} from "@/services/posts";
import {postsAdapter} from "@/adapters/posts";
import PostCard from "@/components/PostCard";
import Button from "@/components/Button";
import Loader from "@/components/Loader";

const Topic: NextPage<{
  posts: PostItem[];
  topic: {name: string; slug: string};
  total: number;
}> = ({posts, topic, total}) => {
  const [displayedPosts, setDisplayedPosts] = useState<PostItem[]>(posts || []);
  const [displayedPostsCount, setTotalPostsCount] = useState(posts?.length || 0);

  const [error, setError] = useState("");
  const [finished, setFinished] = useState(posts?.length === total);
  const [loading, setLoading] = useState(false);
  const [topicSlug, setTopicSlug] = useState(topic?.slug);
  const [totalResults, setTotalResults] = useState(total);
  const handleFetchMorePosts = async () => {
    if (finished) return;

    try {
      setLoading(true);
      const data = await getPostByTopicSlug({
        slug: topicSlug,
        take: 6,
        skip: displayedPostsCount,
      });
      const {posts} = await postsAdapter(data);

      setDisplayedPosts([...displayedPosts, ...posts]);
      setTotalPostsCount(displayedPostsCount + posts.length);
      if (displayedPostsCount === totalResults) setFinished(true);
    } catch (e) {
      setLoading(false);

      setError("An error has ocurred and posts couldn't be retrieved.");
    }
  };
  const router = useRouter();

  React.useEffect(() => {
    const fetchPosts = async (topicSlug: string) => {
      try {
        setLoading(true);
        const data = await getPostByTopicSlug({
          slug: topicSlug,
          take: 6,
        });
        const result = await postsAdapter(data);

        setDisplayedPosts(result.posts);
        setTotalPostsCount(result.posts.length);
        setTotalResults(result.total);
        if (posts.length === result.total) setFinished(true);
        setLoading(false);
      } catch (e) {
        setLoading(false);
        setError("An error has ocurred and posts couldn't be retrieved.");
      }
    };

    router.events.on("routeChangeStart", (url) => {
      const newTopicSlug = url.split("/")[url.split("/").length - 1];

      if (topicSlug && newTopicSlug !== topicSlug) {
        setTopicSlug(topicSlug);
        fetchPosts(newTopicSlug);
      }
    });
  }, [router.events]);

  return (
    <div className="container">
      <Head>
        <title>{topic?.name}</title>
        <meta content="Generated by create next app" name="description" />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <main className="page">
        <div className="breadcrumb-bar">
          <p>
            Showing posts with the label{" "}
            <strong className="breadcrumb-bar__topic-name">{`"${topic?.name}"`}</strong>
          </p>
          <Link passHref href="/">
            <a className="breadcrumb-bar__return-link" href="">
              show all
            </a>
          </Link>
        </div>
        {displayedPosts?.length ? (
          <section className="posts-grid">
            {displayedPosts?.map((post) => (
              <PostCard key={post.slug} post={post} />
            ))}
          </section>
        ) : error ? (
          <p className="message">{error}</p>
        ) : (
          <p className="message">There are no coincidence for your search</p>
        )}
        {loading && <Loader />}
        {!finished && !loading && <Button text="Load More" onClick={handleFetchMorePosts} />}
      </main>

      <style jsx>{`
        .page {
          display: flex;
          flex-direction: column;
          align-items: center;
          gap: var(--padding);
        }

        .posts-grid {
          display: flex;
          flex-direction: column;
          gap: var(--padding);
        }
        .message {
          margin: var(--padding) 0;
        }
        .breadcrumb-bar {
          background: #fff;
          width: 100%;
          border-radius: var(--border-radius);
          padding: var(--padding-sm) var(--padding);
          border: var(--border);
          box-shadow: var(--box-shadow-lg);
          display: flex;
          justify-content: space-between;
          flex-wrap: wrap;
          line-height: 1.5em;
        }
        .breadcrumb-bar p {
          margin: 0;
        }
        .breadcrumb-bar__topic-name {
          font-weight: 600;
          text-transform: uppercase;
        }
        .breadcrumb-bar__return-link {
          text-decoration: 1px solid underline;
          color: var(--primary-main);
        }
        .breadcrumb-bar__return-link:hover {
          opacity: 0.8;
        }
      `}</style>
    </div>
  );
};

export async function getStaticPaths() {
  const res = await getAllTopicsSlugs();

  const paths = res?.data?.topicCollection?.items.map((topic: {slug: string}) => ({
    params: {slug: topic?.slug},
  }));

  return {
    paths,
    fallback: "blocking",
  };
}
export async function getStaticProps({params}: {params: {slug: string}}) {
  const data = await getPostByTopicSlug({slug: params?.slug, take: 6});

  const {posts, total} = await postsAdapter(data);

  const topic = {
    slug: params.slug,
    name: params?.slug?.indexOf("-") !== -1 ? params?.slug?.replaceAll("-", " ") : params?.slug,
  };

  return {
    props: {posts, total, topic},
    revalidate: 1,
  };
}
export default Topic;
