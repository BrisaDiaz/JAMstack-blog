import type {NextPage} from "next";

import Head from "next/head";
import React, {useState, useEffect} from "react";
import {useRouter} from "next/router";

import PostCard from "@/components/PostCard";
import {getPosts, getPostBySearchQuery, getPostsByTag} from "services/posts";
import {PostItem} from "interfaces";
import {postsAdapter} from "@/adapters/posts";
import Button from "@/components/Button";
import Loader from "@/components/Loader";

const Home: NextPage<{
  posts: PostItem[];

  total: number;
}> = ({posts, total}) => {
  const router = useRouter();
  const [displayedPosts, setDisplayedPosts] = useState<PostItem[]>(posts || []);
  const [totalResults, setTotalResults] = useState(total || 0);
  const [displayedPostsCount, setTotalPostsCount] = useState(posts?.length || 0);

  const [error, setError] = useState("");
  const [finished, setFinished] = useState(posts?.length === total);
  const [loading, setLoading] = useState(false);
  const POST_PER_PAGE = 6;
  const handleFetchMorePosts = async () => {
    if (finished) return;

    try {
      setLoading(true);

      let data;

      if (router.query?.search) {
        const query =
          typeof router.query?.search === "object" ? router.query?.search[0] : router.query?.search;

        data = await getPostBySearchQuery({
          query,
          take: POST_PER_PAGE,
          skip: displayedPostsCount,
        });
      } else if (router.query?.tag) {
        const tag =
          typeof router.query?.tag === "object" ? router.query?.tag[0] : router.query?.tag;

        data = await getPostsByTag({
          tag,
          take: POST_PER_PAGE,
          skip: displayedPostsCount,
        });
      } else {
        data = await getPosts({
          take: POST_PER_PAGE,
          skip: displayedPostsCount,
        });
      }

      const {posts} = await postsAdapter(data);

      if (displayedPostsCount + posts.length === totalResults) setFinished(true);
      setDisplayedPosts([...displayedPosts, ...posts]);
      setTotalPostsCount(displayedPostsCount + posts.length);
      setLoading(false);
    } catch (e) {
      setLoading(false);

      setError("An error has ocurred and posts couldn't be retrieved.");
    }
  };

  //// detect url search query changes and reset default state
  useEffect(() => {
    if (!router.query || !router.query?.search) return;
    async function fetchPosts(query: string) {
      try {
        setLoading(true);
        const data = await getPostBySearchQuery({
          query,
          take: POST_PER_PAGE,
        });
        const {posts, total} = await postsAdapter(data);

        if (posts.length === total) setFinished(true);
        setDisplayedPosts(posts);
        setTotalPostsCount(posts.length);
        setTotalResults(total);
        setLoading(false);
      } catch (e) {
        setLoading(false);

        setError("An error has ocurred and posts couldn't be retrieved.");
      }
    }
    const query =
      typeof router.query?.search === "object" ? router.query?.search[0] : router.query?.search;

    fetchPosts(query);
  }, [router.query]);
  useEffect(() => {
    if (!router.query || !router.query?.tag) return;
    async function fetchPosts(tag: string) {
      try {
        setLoading(true);
        const data = await getPostsByTag({
          tag,
          take: POST_PER_PAGE,
        });
        const {posts, total} = await postsAdapter(data);

        if (posts.length === total) setFinished(true);
        setDisplayedPosts(posts);
        setTotalPostsCount(posts.length);
        setTotalResults(total);
        setLoading(false);
      } catch (e) {
        setLoading(false);

        setError("An error has ocurred and posts couldn't be retrieved.");
      }
    }
    const tag = typeof router?.query.tag === "object" ? router.query?.tag[0] : router.query?.tag;

    fetchPosts(tag);
  }, [router.query]);

  return (
    <div className="container">
      <Head>
        <title>TecnoRev</title>
        <meta content="Generated by create next app" name="description" />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <main className="page">
        {displayedPosts?.length ? (
          <section className="posts-grid">
            {displayedPosts?.map((post) => (
              <PostCard key={post.slug} post={post} />
            ))}
          </section>
        ) : error ? (
          <p className="message">{error}</p>
        ) : (
          <p className="message">There are no coincidence for your search</p>
        )}
        {loading && <Loader />}
        {!finished && !loading && (
          <Button text="Load More" onClick={handleFetchMorePosts} />
        )}
      </main>

      <style jsx>{`
        .page {
          display: flex;
          align-items: center;
          flex-direction: column;
          align-items: center;
          gap: var(--padding);
        }
        .posts-grid {
          display: flex;
          flex-direction: column;
          gap: var(--padding);
        }
        .page__tite {
          text-transform: capitalize;
        }
      `}</style>
    </div>
  );
};

export default Home;

export async function getStaticProps() {
  const data = await getPosts({take: 6});
  const {posts, total} = await postsAdapter(data);

  return {
    props: { posts, total },
    revalidate: 1,
  };
}
